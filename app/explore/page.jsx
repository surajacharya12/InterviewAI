"use client";

import React, { useEffect, useState } from "react";
import { Search, Play } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Toaster, toast } from "sonner";
import { useRouter } from "next/navigation";

export default function ExploreMockInterviews() {
  const [mockInterviews, setMockInterviews] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [search, setSearch] = useState("");
  const [error, setError] = useState(null);
  const [clickedMockId, setClickedMockId] = useState(null); // After enroll click
  const [pressedButtonId, setPressedButtonId] = useState(null); // For instant press color
  const router = useRouter();

  const fetchMockInterviews = async (searchTerm = "") => {
    try {
      setIsLoading(true);
      setError(null);

      let url = `${window.location.origin}/api/explore`;
      if (searchTerm) {
        url += `?search=${encodeURIComponent(searchTerm)}`;
      }

      const res = await fetch(url);
      if (!res.ok) throw new Error("Failed to fetch mock interviews");
      const data = await res.json();

      if (data.success) {
        setMockInterviews(data.data);
      } else {
        setError(data.error || "Unknown error");
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchMockInterviews();
  }, []);

  const handleSearch = (e) => {
    e.preventDefault();
    fetchMockInterviews(search);
  };

  const handleStartInterview = async (mock) => {
    try {
      setClickedMockId(mock.mockId); // Mark clicked to disable & blue background

      const res = await fetch("/api/enroll-interview", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ mockId: mock.mockId }),
      });

      const data = await res.json();

      if (res.ok) {
        toast.success(data.message || "Enrolled successfully!");
        setTimeout(() => {
          router.push(`/dashboard`);
        }, 500);
      } else {
        toast.error(data.message || "Failed to enroll");
        setClickedMockId(null); // revert on error
      }
    } catch (err) {
      toast.error("Error: " + err.message);
      setClickedMockId(null); // revert on error
    }
  };

  return (
    <>
      <Toaster position="top-center" richColors />
      <div className="min-h-screen bg-gradient-to-br px-4 py-8">
        {/* Header & Search */}
        <div className="max-w-6xl mx-auto flex flex-col gap-6 sm:flex-row sm:items-center sm:justify-between mb-10">
          <div className="text-center sm:text-left">
            <h1 className="text-4xl md:text-5xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-700 drop-shadow-md">
              Explore Mock Interviews
            </h1>
            <p className="text-base md:text-lg text-gray-600 mt-2">
              Browse and search mock interview questions generated by users.
            </p>
          </div>

          <div className="w-full sm:w-[350px] relative">
            <form onSubmit={handleSearch}>
              <input
                type="text"
                placeholder="Search by position, description, or creator..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="w-full pl-5 pr-12 py-3 rounded-full bg-white shadow-md border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
              />
              <Button
                size="sm"
                type="submit"
                className="absolute right-2 top-1/2 -translate-y-1/2 rounded-full px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white shadow"
              >
                <Search className="h-4 w-4" />
              </Button>
            </form>
          </div>
        </div>

        {/* Mock Interviews List */}
        <div className="max-w-6xl mx-auto">
          <h2 className="text-3xl font-extrabold text-gray-800 mb-6 text-center">
            Mock Interviews
          </h2>

          {isLoading ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 px-4">
              {[...Array(6)].map((_, index) => (
                <div key={index} className="space-y-4">
                  <Skeleton className="h-48 w-full rounded-xl" />
                  <Skeleton className="h-6 w-3/4" />
                  <Skeleton className="h-4 w-2/3" />
                </div>
              ))}
            </div>
          ) : error ? (
            <p className="text-center text-red-600 font-semibold mt-12">
              {error}
            </p>
          ) : mockInterviews.length > 0 ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 px-4">
              {mockInterviews.map((mock) => {
                const isClicked = clickedMockId === mock.mockId;
                const isPressed = pressedButtonId === mock.mockId;
                const active = isClicked || isPressed;

                return (
                  <div
                    key={mock.mockId}
                    className="bg-white rounded-xl p-6 shadow-md hover:shadow-lg transition-shadow duration-200 flex flex-col justify-between"
                  >
                    <div>
                      <h3 className="text-xl font-semibold text-blue-700 mb-2">
                        {mock.jobPosition}
                      </h3>
                      <p
                        className="text-gray-700 mb-1 truncate"
                        title={mock.jobDesc}
                      >
                        {mock.jobDesc}
                      </p>
                      <p className="text-gray-500 text-sm mb-1">
                        <strong>Experience:</strong> {mock.jobExperience} years
                      </p>
                      <p
                        className="text-gray-400 text-xs mb-1 truncate"
                        title={mock.createdBy}
                      >
                        <strong>Created By:</strong> {mock.createdBy}
                      </p>
                      <p className="text-gray-400 text-xs mb-4">
                        <strong>Created At:</strong> {mock.createdAt}
                      </p>
                    </div>
                    <Button
  size="lg"
  variant={isClicked ? "default" : "outline"}
  className={`w-[320px] mt-auto flex items-center justify-center gap-2 transition
    hover:bg-indigo-600 hover:text-white
    ${isClicked ? "bg-indigo-600 text-white hover:bg-indigo-700" : ""}
  `}
  onClick={() => handleStartInterview(mock)}
  disabled={isClicked}
>
  <Play className="w-5 h-5" />
  Start Interview
</Button>

                  </div>
                );
              })}
            </div>
          ) : (
            <p className="text-center text-gray-500 mt-12">
              {search
                ? `No mock interviews found for "${search}".`
                : "No mock interviews available."}
            </p>
          )}
        </div>
      </div>
    </>
  );
}
